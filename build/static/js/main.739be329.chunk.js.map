{"version":3,"sources":["CharaCard.js","Wrapper.js","Navbar.js","Jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["CharaCard","props","className","Clicked","onClick","handleClick","id","alt","name","src","image","Wrapper","children","Navbar","currentScore","highScore","Jumbotron","App","state","characters","shufflyArray","scoreHandle","console","log","timesClicked","forEach","element","setState","handleIncrement","shuffleArry","shuffle","array","temporaryVal","randomIndx","currentIndx","length","Math","floor","random","this","map","character","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+kEAceA,MAZf,SAAmBC,GACf,OACI,yBAAKC,UAAW,SAAWD,EAAME,QAAU,UAAY,IAAKC,QAAS,kBAAMH,EAAMI,YAAYJ,EAAMK,MAC/F,yBAAKJ,UAAU,iBACX,yBAAKK,IAAKN,EAAMO,KAAMC,IAAKR,EAAMS,SAErC,yBAAKR,UAAU,kBCFZS,MAJf,SAAiBV,GACb,OAAO,yBAAKC,UAAU,WAAWD,EAAMW,WCc5BC,MAff,SAAgBZ,GACZ,OACI,4BAAQC,UAAU,6BACd,yBAAKA,UAAU,OACX,wBAAIA,UAAU,YAAd,qBACA,yBAAKA,UAAU,YACX,qCAAU,8BAAOD,EAAMa,eACvB,yCAAc,8BAAOb,EAAMc,WAA3B,KACCd,EAAMW,aCEZI,MAVf,SAAmBf,GACf,OACI,yBAAKC,UAAU,6BACX,yBAAKA,UAAU,aAAaD,EAAMW,SAC9B,uBAAGV,UAAU,QAAb,+F,OC6FDe,G,iNAzFbC,MAAQ,CACNC,aACAJ,UAAW,EACXD,aAAc,EACdX,SAAS,G,EAGXE,YAAc,SAAAC,GACZ,EAAKc,eACL,EAAKC,YAAYf,GACjBgB,QAAQC,IAAI,EAAKL,MAAMM,e,EAGzBH,YAAc,SAAAf,GACZ,EAAKY,MAAMC,WAAWM,SAAQ,SAAAC,GACxBpB,IAAOoB,EAAQpB,KAA0B,IAApBoB,EAAQvB,SAC/BuB,EAAQvB,SAAU,EAClB,EAAKwB,SAAS,CAAExB,SAAS,IACzB,EAAKyB,mBACItB,IAAOoB,EAAQpB,KAA0B,IAApBoB,EAAQvB,UAClC,EAAKe,MAAMJ,aAAe,EAAKI,MAAMH,WACvC,EAAKY,SAAS,CAAEZ,UAAW,EAAKG,MAAMJ,eAExC,EAAKa,SAAS,CAAEb,aAAc,IAC9B,EAAKa,SAAS,CAAExB,SAAS,IACzB,EAAKe,MAAMC,WAAWM,SAAQ,SAAAC,GAAO,OAAKA,EAAQvB,SAAU,KAC5DmB,QAAQC,IAAI,EAAKL,MAAMC,iB,EAK7BC,aAAe,WAGb,IAAMS,EAAc,EAAKC,QAAQ,EAAKZ,MAAMC,YAE5C,EAAKQ,SAAS,CAAEE,iB,EAGlBD,gBAAkB,WAChB,EAAKD,SAAS,CAAEb,aAAc,EAAKI,MAAMJ,aAAe,K,EAM1DgB,QAAU,SAAAC,GAKR,IAJA,IACEC,EACAC,EAFEC,EAAcH,EAAMI,OAIjB,IAAMD,GACXD,EAAaG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIxCF,EAAeD,EAHfG,GAAe,GAIfH,EAAMG,GAAeH,EAAME,GAC3BF,EAAME,GAAcD,EAGtB,OAAOD,G,wEAIC,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEjB,aAAcyB,KAAKrB,MAAMJ,aACzBC,UAAWwB,KAAKrB,MAAMH,YAExB,kBAAC,EAAD,MACCwB,KAAKrB,MAAMC,WAAWqB,KAAI,SAAAC,GAAS,OAClC,kBAAC,EAAD,CACEtC,QAAS,EAAKe,MAAMf,QACpBE,YAAa,EAAKA,YAClBC,GAAImC,EAAUnC,GACdoC,IAAKD,EAAUnC,GACfE,KAAMiC,EAAUjC,KAChBE,MAAO+B,EAAU/B,gB,GAjFXiC,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.739be329.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction CharaCard(props) {\r\n    return (\r\n        <div className={\"card \" + (props.Clicked ? \"animate\" : \"\")} onClick={() => props.handleClick(props.id)} >\r\n            <div className=\"img-container\">\r\n                <img alt={props.name} src={props.image} />\r\n            </div>\r\n            <div className=\"img-content\">\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default CharaCard;","import React from \"react\";\r\n\r\nfunction Wrapper(props) {\r\n    return <div className=\"wrapper\">{props.children}</div>\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\n\r\nfunction Navbar(props) {\r\n    return (\r\n        <header className=\"container-fluid fixed-top\" >\r\n            <div className=\"row\">\r\n                <h1 className=\"col-sm-8\">Anime Memory Game</h1>\r\n                <nav className=\"col-sm-4\">\r\n                    <p>Score: <span>{props.currentScore}</span></p>\r\n                    <p>Top Score: <span>{props.highScore}</span> </p>\r\n                    {props.children}\r\n                </nav>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\n\r\nfunction Jumbotron(props) {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid\">\r\n            <div className=\"container\">{props.children}\r\n                <p className=\"lead\">Get points by clicking on character portraits! Don't press more than once or else reset!</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Jumbotron;","import React, { Component } from \"react\";\nimport CharaCard from \"./CharaCard\";\nimport Wrapper from \"./Wrapper\";\nimport Navbar from \"./Navbar\";\nimport Jumbotron from \"./Jumbotron\";\nimport characters from \"./characters.json\";\nimport \"./App.css\";\n\n\nclass App extends Component {\n  state = {\n    characters,\n    highScore: 0,\n    currentScore: 0,\n    Clicked: false\n  };\n\n  handleClick = id => {\n    this.shufflyArray();\n    this.scoreHandle(id);\n    console.log(this.state.timesClicked);\n  };\n\n  scoreHandle = id => {\n    this.state.characters.forEach(element => {\n      if (id === element.id && element.Clicked === false) {\n        element.Clicked = true;\n        this.setState({ Clicked: false });\n        this.handleIncrement();\n      } else if (id === element.id && element.Clicked === true) {\n        if (this.state.currentScore > this.state.highScore) {\n          this.setState({ highScore: this.state.currentScore });\n        }\n        this.setState({ currentScore: 0 });\n        this.setState({ Clicked: true });\n        this.state.characters.forEach(element => (element.Clicked = false));\n        console.log(this.state.characters);\n      }\n    });\n  };\n\n  shufflyArray = () => {\n    ///array for the shuffle///\n\n    const shuffleArry = this.shuffle(this.state.characters);\n\n    this.setState({ shuffleArry });\n  };\n\n  handleIncrement = () => {\n    this.setState({ currentScore: this.state.currentScore + 1 });\n\n  };\n\n  ///taking array parameters and shuffle///\n\n  shuffle = array => {\n    var currentIndx = array.length,\n      temporaryVal,\n      randomIndx;\n\n    while (0 !== currentIndx) {\n      randomIndx = Math.floor(Math.random() * currentIndx);\n      currentIndx -= 1;\n\n      //swap the element//\n      temporaryVal = array[currentIndx];\n      array[currentIndx] = array[randomIndx];\n      array[randomIndx] = temporaryVal;\n    }\n\n    return array;\n\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Navbar\n          currentScore={this.state.currentScore}\n          highScore={this.state.highScore} />\n\n        <Jumbotron />\n        {this.state.characters.map(character => (\n          <CharaCard\n            Clicked={this.state.Clicked}\n            handleClick={this.handleClick}\n            id={character.id}\n            key={character.id}\n            name={character.name}\n            image={character.image} />\n        ))}\n      </Wrapper>\n    );\n  }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}